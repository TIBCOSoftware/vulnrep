// Code generated by genenums - DO NOT EDIT

package vulnrep

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
)

func xmlElemAsString(d *xml.Decoder, start xml.StartElement) (string, error) {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return "", err
	}
	return s, nil
}

type RelationshipType int

const (
	RelationshipDefaultComponentOf RelationshipType = iota
	RelationshipOptionalComponentOf
	RelationshipExternalComponentOf
	RelationshipInstalledOn
	RelationshipInstalledWith

	maxRelationshipType
)

var genRelationshipTypeToXMLStr = map[RelationshipType]string{
	RelationshipDefaultComponentOf:  "Default Component Of",
	RelationshipOptionalComponentOf: "Optional Component Of",
	RelationshipExternalComponentOf: "External Component Of",
	RelationshipInstalledOn:         "Installed On",
	RelationshipInstalledWith:       "Installed With",
}

var genXMLStrToRelationshipType = map[string]RelationshipType{
	"Default Component Of":  RelationshipDefaultComponentOf,
	"Optional Component Of": RelationshipOptionalComponentOf,
	"External Component Of": RelationshipExternalComponentOf,
	"Installed On":          RelationshipInstalledOn,
	"Installed With":        RelationshipInstalledWith,
}

func (obj *RelationshipType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding RelationshipType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToRelationshipType[s]; !ok {
		return fmt.Errorf("unrecognized RelationshipType value %v", s)
	}
	return nil
}

func (obj *RelationshipType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToRelationshipType[s]; !ok {
		return fmt.Errorf("unrecognized RelationshipType value %v", s)
	}
	return nil
}

func (obj *RelationshipType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj RelationshipType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genRelationshipTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized RelationshipType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj RelationshipType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genRelationshipTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized RelationshipType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToRelationshipType = map[string]RelationshipType{
	"default_component_of":  RelationshipDefaultComponentOf,
	"optional_component_of": RelationshipOptionalComponentOf,
	"external_component_of": RelationshipExternalComponentOf,
	"installed_on":          RelationshipInstalledOn,
	"installed_with":        RelationshipInstalledWith,
}

var genRelationshipTypeToJSONStr = map[RelationshipType]string{
	RelationshipDefaultComponentOf:  "default_component_of",
	RelationshipOptionalComponentOf: "optional_component_of",
	RelationshipExternalComponentOf: "external_component_of",
	RelationshipInstalledOn:         "installed_on",
	RelationshipInstalledWith:       "installed_with",
}

func (obj *RelationshipType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToRelationshipType[string(data)]; !ok {
		return fmt.Errorf("unrecognized RelationshipType value %v", string(data))
	}
	return nil
}

func (obj RelationshipType) MarshalJSON() ([]byte, error) {
	s, ok := genRelationshipTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized RelationshipType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj RelationshipType) check(val *Validator) {
	if obj < 0 || obj >= maxRelationshipType {
		val.err(fmt.Sprintf("unrecognized RelationshipType %v", obj))
	}
}

type InvolvementStatusType int

const (
	InvolvementStatusOpen InvolvementStatusType = iota
	InvolvementStatusDisputed
	InvolvementStatusInProgress
	InvolvementStatusCompleted
	InvolvementStatusContactAttempted
	InvolvementStatusNotContacted

	maxInvolvementStatusType
)

var genInvolvementStatusTypeToXMLStr = map[InvolvementStatusType]string{
	InvolvementStatusOpen:             "Open",
	InvolvementStatusDisputed:         "Disputed",
	InvolvementStatusInProgress:       "In Progress",
	InvolvementStatusCompleted:        "Completed",
	InvolvementStatusContactAttempted: "Contact Attempted",
	InvolvementStatusNotContacted:     "Not Contacted",
}

var genXMLStrToInvolvementStatusType = map[string]InvolvementStatusType{
	"Open":              InvolvementStatusOpen,
	"Disputed":          InvolvementStatusDisputed,
	"In Progress":       InvolvementStatusInProgress,
	"Completed":         InvolvementStatusCompleted,
	"Contact Attempted": InvolvementStatusContactAttempted,
	"Not Contacted":     InvolvementStatusNotContacted,
}

func (obj *InvolvementStatusType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding InvolvementStatusType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToInvolvementStatusType[s]; !ok {
		return fmt.Errorf("unrecognized InvolvementStatusType value %v", s)
	}
	return nil
}

func (obj *InvolvementStatusType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToInvolvementStatusType[s]; !ok {
		return fmt.Errorf("unrecognized InvolvementStatusType value %v", s)
	}
	return nil
}

func (obj *InvolvementStatusType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj InvolvementStatusType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genInvolvementStatusTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized InvolvementStatusType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj InvolvementStatusType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genInvolvementStatusTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized InvolvementStatusType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToInvolvementStatusType = map[string]InvolvementStatusType{
	"open":              InvolvementStatusOpen,
	"disputed":          InvolvementStatusDisputed,
	"in_progress":       InvolvementStatusInProgress,
	"completed":         InvolvementStatusCompleted,
	"contact_attempted": InvolvementStatusContactAttempted,
	"not_contacted":     InvolvementStatusNotContacted,
}

var genInvolvementStatusTypeToJSONStr = map[InvolvementStatusType]string{
	InvolvementStatusOpen:             "open",
	InvolvementStatusDisputed:         "disputed",
	InvolvementStatusInProgress:       "in_progress",
	InvolvementStatusCompleted:        "completed",
	InvolvementStatusContactAttempted: "contact_attempted",
	InvolvementStatusNotContacted:     "not_contacted",
}

func (obj *InvolvementStatusType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToInvolvementStatusType[string(data)]; !ok {
		return fmt.Errorf("unrecognized InvolvementStatusType value %v", string(data))
	}
	return nil
}

func (obj InvolvementStatusType) MarshalJSON() ([]byte, error) {
	s, ok := genInvolvementStatusTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized InvolvementStatusType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj InvolvementStatusType) check(val *Validator) {
	if obj < 0 || obj >= maxInvolvementStatusType {
		val.err(fmt.Sprintf("unrecognized InvolvementStatusType %v", obj))
	}
}

type AffectedStatusType int

const (
	AffectedStatusFirstAffected AffectedStatusType = iota
	AffectedStatusFirstFixed
	AffectedStatusFixed
	AffectedStatusKnownAffected
	AffectedStatusKnownNotAffected
	AffectedStatusLastAffected
	AffectedStatusRecommended

	maxAffectedStatusType
)

var genAffectedStatusTypeToXMLStr = map[AffectedStatusType]string{
	AffectedStatusFirstAffected:    "First Affected",
	AffectedStatusFirstFixed:       "First Fixed",
	AffectedStatusFixed:            "Fixed",
	AffectedStatusKnownAffected:    "Known Affected",
	AffectedStatusKnownNotAffected: "Known Not Affected",
	AffectedStatusLastAffected:     "Last Affected",
	AffectedStatusRecommended:      "Recommended",
}

var genXMLStrToAffectedStatusType = map[string]AffectedStatusType{
	"First Affected":     AffectedStatusFirstAffected,
	"First Fixed":        AffectedStatusFirstFixed,
	"Fixed":              AffectedStatusFixed,
	"Known Affected":     AffectedStatusKnownAffected,
	"Known Not Affected": AffectedStatusKnownNotAffected,
	"Last Affected":      AffectedStatusLastAffected,
	"Recommended":        AffectedStatusRecommended,
}

func (obj *AffectedStatusType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding AffectedStatusType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToAffectedStatusType[s]; !ok {
		return fmt.Errorf("unrecognized AffectedStatusType value %v", s)
	}
	return nil
}

func (obj *AffectedStatusType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToAffectedStatusType[s]; !ok {
		return fmt.Errorf("unrecognized AffectedStatusType value %v", s)
	}
	return nil
}

func (obj *AffectedStatusType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj AffectedStatusType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genAffectedStatusTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized AffectedStatusType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj AffectedStatusType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genAffectedStatusTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized AffectedStatusType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToAffectedStatusType = map[string]AffectedStatusType{
	"first_affected":     AffectedStatusFirstAffected,
	"first_fixed":        AffectedStatusFirstFixed,
	"fixed":              AffectedStatusFixed,
	"known_affected":     AffectedStatusKnownAffected,
	"known_not_affected": AffectedStatusKnownNotAffected,
	"last_affected":      AffectedStatusLastAffected,
	"recommended":        AffectedStatusRecommended,
}

var genAffectedStatusTypeToJSONStr = map[AffectedStatusType]string{
	AffectedStatusFirstAffected:    "first_affected",
	AffectedStatusFirstFixed:       "first_fixed",
	AffectedStatusFixed:            "fixed",
	AffectedStatusKnownAffected:    "known_affected",
	AffectedStatusKnownNotAffected: "known_not_affected",
	AffectedStatusLastAffected:     "last_affected",
	AffectedStatusRecommended:      "recommended",
}

func (obj *AffectedStatusType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToAffectedStatusType[string(data)]; !ok {
		return fmt.Errorf("unrecognized AffectedStatusType value %v", string(data))
	}
	return nil
}

func (obj AffectedStatusType) MarshalJSON() ([]byte, error) {
	s, ok := genAffectedStatusTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized AffectedStatusType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj AffectedStatusType) check(val *Validator) {
	if obj < 0 || obj >= maxAffectedStatusType {
		val.err(fmt.Sprintf("unrecognized AffectedStatusType %v", obj))
	}
}

type RemedyType int

const (
	RemedyWorkaround RemedyType = iota
	RemedyMitigation
	RemedyVendorFix
	RemedyNoneAvailable
	RemedyWillNotFix

	maxRemedyType
)

var genRemedyTypeToXMLStr = map[RemedyType]string{
	RemedyWorkaround:    "Workaround",
	RemedyMitigation:    "Mitigation",
	RemedyVendorFix:     "Vendor Fix",
	RemedyNoneAvailable: "None Available",
	RemedyWillNotFix:    "Will Not Fix",
}

var genXMLStrToRemedyType = map[string]RemedyType{
	"Workaround":     RemedyWorkaround,
	"Mitigation":     RemedyMitigation,
	"Vendor Fix":     RemedyVendorFix,
	"None Available": RemedyNoneAvailable,
	"Will Not Fix":   RemedyWillNotFix,
}

func (obj *RemedyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding RemedyType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToRemedyType[s]; !ok {
		return fmt.Errorf("unrecognized RemedyType value %v", s)
	}
	return nil
}

func (obj *RemedyType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToRemedyType[s]; !ok {
		return fmt.Errorf("unrecognized RemedyType value %v", s)
	}
	return nil
}

func (obj *RemedyType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj RemedyType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genRemedyTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized RemedyType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj RemedyType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genRemedyTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized RemedyType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToRemedyType = map[string]RemedyType{
	"workaround":     RemedyWorkaround,
	"mitigation":     RemedyMitigation,
	"vendor_fix":     RemedyVendorFix,
	"none_available": RemedyNoneAvailable,
	"will_not_fix":   RemedyWillNotFix,
}

var genRemedyTypeToJSONStr = map[RemedyType]string{
	RemedyWorkaround:    "workaround",
	RemedyMitigation:    "mitigation",
	RemedyVendorFix:     "vendor_fix",
	RemedyNoneAvailable: "none_available",
	RemedyWillNotFix:    "will_not_fix",
}

func (obj *RemedyType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToRemedyType[string(data)]; !ok {
		return fmt.Errorf("unrecognized RemedyType value %v", string(data))
	}
	return nil
}

func (obj RemedyType) MarshalJSON() ([]byte, error) {
	s, ok := genRemedyTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized RemedyType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj RemedyType) check(val *Validator) {
	if obj < 0 || obj >= maxRemedyType {
		val.err(fmt.Sprintf("unrecognized RemedyType %v", obj))
	}
}

type DocStatus int

const (
	DocStatusDraft DocStatus = iota
	DocStatusInterim
	DocStatusFinal

	maxDocStatus
)

var genDocStatusToXMLStr = map[DocStatus]string{
	DocStatusDraft:   "Draft",
	DocStatusInterim: "Interim",
	DocStatusFinal:   "Final",
}

var genXMLStrToDocStatus = map[string]DocStatus{
	"Draft":   DocStatusDraft,
	"Interim": DocStatusInterim,
	"Final":   DocStatusFinal,
}

func (obj *DocStatus) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding DocStatus: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToDocStatus[s]; !ok {
		return fmt.Errorf("unrecognized DocStatus value %v", s)
	}
	return nil
}

func (obj *DocStatus) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToDocStatus[s]; !ok {
		return fmt.Errorf("unrecognized DocStatus value %v", s)
	}
	return nil
}

func (obj *DocStatus) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj DocStatus) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genDocStatusToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized DocStatus value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj DocStatus) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genDocStatusToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized DocStatus %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToDocStatus = map[string]DocStatus{
	"draft":   DocStatusDraft,
	"interim": DocStatusInterim,
	"final":   DocStatusFinal,
}

var genDocStatusToJSONStr = map[DocStatus]string{
	DocStatusDraft:   "draft",
	DocStatusInterim: "interim",
	DocStatusFinal:   "final",
}

func (obj *DocStatus) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToDocStatus[string(data)]; !ok {
		return fmt.Errorf("unrecognized DocStatus value %v", string(data))
	}
	return nil
}

func (obj DocStatus) MarshalJSON() ([]byte, error) {
	s, ok := genDocStatusToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized DocStatus value %v", obj)
	}
	return json.Marshal(s)
}

func (obj DocStatus) check(val *Validator) {
	if obj < 0 || obj >= maxDocStatus {
		val.err(fmt.Sprintf("unrecognized DocStatus %v", obj))
	}
}

type ReferenceType int

const (
	ReferenceExternal ReferenceType = iota
	ReferenceSelf

	maxReferenceType
)

var genReferenceTypeToXMLStr = map[ReferenceType]string{
	ReferenceExternal: "External",
	ReferenceSelf:     "Self",
}

var genXMLStrToReferenceType = map[string]ReferenceType{
	"External": ReferenceExternal,
	"Self":     ReferenceSelf,
}

func (obj *ReferenceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding ReferenceType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToReferenceType[s]; !ok {
		return fmt.Errorf("unrecognized ReferenceType value %v", s)
	}
	return nil
}

func (obj *ReferenceType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToReferenceType[s]; !ok {
		return fmt.Errorf("unrecognized ReferenceType value %v", s)
	}
	return nil
}

func (obj *ReferenceType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj ReferenceType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genReferenceTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized ReferenceType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj ReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genReferenceTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized ReferenceType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToReferenceType = map[string]ReferenceType{
	"external": ReferenceExternal,
	"self":     ReferenceSelf,
}

var genReferenceTypeToJSONStr = map[ReferenceType]string{
	ReferenceExternal: "external",
	ReferenceSelf:     "self",
}

func (obj *ReferenceType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToReferenceType[string(data)]; !ok {
		return fmt.Errorf("unrecognized ReferenceType value %v", string(data))
	}
	return nil
}

func (obj ReferenceType) MarshalJSON() ([]byte, error) {
	s, ok := genReferenceTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized ReferenceType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj ReferenceType) check(val *Validator) {
	if obj < 0 || obj >= maxReferenceType {
		val.err(fmt.Sprintf("unrecognized ReferenceType %v", obj))
	}
}

type NoteType int

const (
	NoteDescription NoteType = iota
	NoteDetails
	NoteFAQ
	NoteGeneral
	NoteLegalDisclaimer
	NoteOther
	NoteSummary

	maxNoteType
)

var genNoteTypeToXMLStr = map[NoteType]string{
	NoteDescription:     "Description",
	NoteDetails:         "Details",
	NoteFAQ:             "FAQ",
	NoteGeneral:         "General",
	NoteLegalDisclaimer: "Legal Disclaimer",
	NoteOther:           "Other",
	NoteSummary:         "Summary",
}

var genXMLStrToNoteType = map[string]NoteType{
	"Description":      NoteDescription,
	"Details":          NoteDetails,
	"FAQ":              NoteFAQ,
	"General":          NoteGeneral,
	"Legal Disclaimer": NoteLegalDisclaimer,
	"Other":            NoteOther,
	"Summary":          NoteSummary,
}

func (obj *NoteType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding NoteType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToNoteType[s]; !ok {
		return fmt.Errorf("unrecognized NoteType value %v", s)
	}
	return nil
}

func (obj *NoteType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToNoteType[s]; !ok {
		return fmt.Errorf("unrecognized NoteType value %v", s)
	}
	return nil
}

func (obj *NoteType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj NoteType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genNoteTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized NoteType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj NoteType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genNoteTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized NoteType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToNoteType = map[string]NoteType{
	"description":      NoteDescription,
	"details":          NoteDetails,
	"faq":              NoteFAQ,
	"general":          NoteGeneral,
	"legal_disclaimer": NoteLegalDisclaimer,
	"other":            NoteOther,
	"summary":          NoteSummary,
}

var genNoteTypeToJSONStr = map[NoteType]string{
	NoteDescription:     "description",
	NoteDetails:         "details",
	NoteFAQ:             "faq",
	NoteGeneral:         "general",
	NoteLegalDisclaimer: "legal_disclaimer",
	NoteOther:           "other",
	NoteSummary:         "summary",
}

func (obj *NoteType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToNoteType[string(data)]; !ok {
		return fmt.Errorf("unrecognized NoteType value %v", string(data))
	}
	return nil
}

func (obj NoteType) MarshalJSON() ([]byte, error) {
	s, ok := genNoteTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized NoteType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj NoteType) check(val *Validator) {
	if obj < 0 || obj >= maxNoteType {
		val.err(fmt.Sprintf("unrecognized NoteType %v", obj))
	}
}

type PublisherType int

const (
	PubTypeVendor PublisherType = iota
	PubTypeDiscoverer
	PubTypeCoordinator
	PubTypeUser
	PubTypeOther

	maxPublisherType
)

var genPublisherTypeToXMLStr = map[PublisherType]string{
	PubTypeVendor:      "Vendor",
	PubTypeDiscoverer:  "Discoverer",
	PubTypeCoordinator: "Coordinator",
	PubTypeUser:        "User",
	PubTypeOther:       "Other",
}

var genXMLStrToPublisherType = map[string]PublisherType{
	"Vendor":      PubTypeVendor,
	"Discoverer":  PubTypeDiscoverer,
	"Coordinator": PubTypeCoordinator,
	"User":        PubTypeUser,
	"Other":       PubTypeOther,
}

func (obj *PublisherType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding PublisherType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToPublisherType[s]; !ok {
		return fmt.Errorf("unrecognized PublisherType value %v", s)
	}
	return nil
}

func (obj *PublisherType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToPublisherType[s]; !ok {
		return fmt.Errorf("unrecognized PublisherType value %v", s)
	}
	return nil
}

func (obj *PublisherType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj PublisherType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genPublisherTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized PublisherType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj PublisherType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genPublisherTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized PublisherType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToPublisherType = map[string]PublisherType{
	"vendor":      PubTypeVendor,
	"discoverer":  PubTypeDiscoverer,
	"coordinator": PubTypeCoordinator,
	"user":        PubTypeUser,
	"other":       PubTypeOther,
}

var genPublisherTypeToJSONStr = map[PublisherType]string{
	PubTypeVendor:      "vendor",
	PubTypeDiscoverer:  "discoverer",
	PubTypeCoordinator: "coordinator",
	PubTypeUser:        "user",
	PubTypeOther:       "other",
}

func (obj *PublisherType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToPublisherType[string(data)]; !ok {
		return fmt.Errorf("unrecognized PublisherType value %v", string(data))
	}
	return nil
}

func (obj PublisherType) MarshalJSON() ([]byte, error) {
	s, ok := genPublisherTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized PublisherType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj PublisherType) check(val *Validator) {
	if obj < 0 || obj >= maxPublisherType {
		val.err(fmt.Sprintf("unrecognized PublisherType %v", obj))
	}
}

type BranchType int

const (
	BranchVendor BranchType = iota
	BranchProductFamily
	BranchProductName
	BranchProductVersion
	BranchPatchLevel
	BranchServicePack
	BranchArchitecture
	BranchLanguage
	BranchLegacy
	BranchSpecification
	BranchHostName
	BranchRealm
	BranchResource

	maxBranchType
)

var genBranchTypeToXMLStr = map[BranchType]string{
	BranchVendor:         "Vendor",
	BranchProductFamily:  "Product Family",
	BranchProductName:    "Product Name",
	BranchProductVersion: "Product Version",
	BranchPatchLevel:     "Patch Level",
	BranchServicePack:    "Service Pack",
	BranchArchitecture:   "Architecture",
	BranchLanguage:       "Language",
	BranchLegacy:         "Legacy",
	BranchSpecification:  "Specification",
	BranchHostName:       "Host Name",
	BranchRealm:          "Realm",
	BranchResource:       "Resource",
}

var genXMLStrToBranchType = map[string]BranchType{
	"Vendor":          BranchVendor,
	"Product Family":  BranchProductFamily,
	"Product Name":    BranchProductName,
	"Product Version": BranchProductVersion,
	"Patch Level":     BranchPatchLevel,
	"Service Pack":    BranchServicePack,
	"Architecture":    BranchArchitecture,
	"Language":        BranchLanguage,
	"Legacy":          BranchLegacy,
	"Specification":   BranchSpecification,
	"Host Name":       BranchHostName,
	"Realm":           BranchRealm,
	"Resource":        BranchResource,
}

func (obj *BranchType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding BranchType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToBranchType[s]; !ok {
		return fmt.Errorf("unrecognized BranchType value %v", s)
	}
	return nil
}

func (obj *BranchType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToBranchType[s]; !ok {
		return fmt.Errorf("unrecognized BranchType value %v", s)
	}
	return nil
}

func (obj *BranchType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj BranchType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genBranchTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized BranchType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj BranchType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genBranchTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized BranchType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToBranchType = map[string]BranchType{
	"vendor":          BranchVendor,
	"product_family":  BranchProductFamily,
	"product_name":    BranchProductName,
	"product_version": BranchProductVersion,
	"patch_level":     BranchPatchLevel,
	"service_pack":    BranchServicePack,
	"architecture":    BranchArchitecture,
	"language":        BranchLanguage,
	"legacy":          BranchLegacy,
	"specification":   BranchSpecification,
	"host_name":       BranchHostName,
	"realm":           BranchRealm,
	"resource":        BranchResource,
}

var genBranchTypeToJSONStr = map[BranchType]string{
	BranchVendor:         "vendor",
	BranchProductFamily:  "product_family",
	BranchProductName:    "product_name",
	BranchProductVersion: "product_version",
	BranchPatchLevel:     "patch_level",
	BranchServicePack:    "service_pack",
	BranchArchitecture:   "architecture",
	BranchLanguage:       "language",
	BranchLegacy:         "legacy",
	BranchSpecification:  "specification",
	BranchHostName:       "host_name",
	BranchRealm:          "realm",
	BranchResource:       "resource",
}

func (obj *BranchType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToBranchType[string(data)]; !ok {
		return fmt.Errorf("unrecognized BranchType value %v", string(data))
	}
	return nil
}

func (obj BranchType) MarshalJSON() ([]byte, error) {
	s, ok := genBranchTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized BranchType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj BranchType) check(val *Validator) {
	if obj < 0 || obj >= maxBranchType {
		val.err(fmt.Sprintf("unrecognized BranchType %v", obj))
	}
}

type ThreatType int

const (
	ThreatImpact ThreatType = iota
	ThreatExploitStatus
	ThreatTargetSet

	maxThreatType
)

var genThreatTypeToXMLStr = map[ThreatType]string{
	ThreatImpact:        "Impact",
	ThreatExploitStatus: "Exploit Status",
	ThreatTargetSet:     "Target Set",
}

var genXMLStrToThreatType = map[string]ThreatType{
	"Impact":         ThreatImpact,
	"Exploit Status": ThreatExploitStatus,
	"Target Set":     ThreatTargetSet,
}

func (obj *ThreatType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s, err := xmlElemAsString(d, start)
	if err != nil {
		return fmt.Errorf("problem decoding ThreatType: %v", err)
	}
	var ok bool
	if *obj, ok = genXMLStrToThreatType[s]; !ok {
		return fmt.Errorf("unrecognized ThreatType value %v", s)
	}
	return nil
}

func (obj *ThreatType) mapXMLValue(s string) error {
	var ok bool
	if *obj, ok = genXMLStrToThreatType[s]; !ok {
		return fmt.Errorf("unrecognized ThreatType value %v", s)
	}
	return nil
}

func (obj *ThreatType) UnmarshalXMLAttr(attr xml.Attr) error {
	return obj.mapXMLValue(attr.Value)
}

func (obj ThreatType) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	s, ok := genThreatTypeToXMLStr[obj]
	if !ok {
		return xml.Attr{}, fmt.Errorf("unrecognized ThreatType value %v", obj)
	}
	return xml.Attr{Name: name, Value: s}, nil
}

func (obj ThreatType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	s, ok := genThreatTypeToXMLStr[obj]
	if !ok {
		return fmt.Errorf("unrecognized ThreatType %v", obj)
	}
	return e.EncodeElement(s, start)
}

var genJSONStrToThreatType = map[string]ThreatType{
	"impact":         ThreatImpact,
	"exploit_status": ThreatExploitStatus,
	"target_set":     ThreatTargetSet,
}

var genThreatTypeToJSONStr = map[ThreatType]string{
	ThreatImpact:        "impact",
	ThreatExploitStatus: "exploit_status",
	ThreatTargetSet:     "target_set",
}

func (obj *ThreatType) UnmarshalJSON(data []byte) error {
	var ok bool
	if *obj, ok = genJSONStrToThreatType[string(data)]; !ok {
		return fmt.Errorf("unrecognized ThreatType value %v", string(data))
	}
	return nil
}

func (obj ThreatType) MarshalJSON() ([]byte, error) {
	s, ok := genThreatTypeToJSONStr[obj]
	if !ok {
		return nil, fmt.Errorf("unrecognized ThreatType value %v", obj)
	}
	return json.Marshal(s)
}

func (obj ThreatType) check(val *Validator) {
	if obj < 0 || obj >= maxThreatType {
		val.err(fmt.Sprintf("unrecognized ThreatType %v", obj))
	}
}
